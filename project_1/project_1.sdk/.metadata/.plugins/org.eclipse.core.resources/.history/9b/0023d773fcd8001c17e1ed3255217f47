/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "sleep.h"
#include <stdlib.h>
#include "time.h"

int main(void)
{
	init_platform();
	int somme =0;

	/*********** CODE TP 2 *****************/
	xil_printf ("=================================\n");
	xil_printf ("      Seance 2 - Accu_IP v2\n");
	xil_printf ("Baptiste FRITOT - Jeremy VICENTE\n");
	xil_printf ("=================================\r\n");


	  // On recupère l'adresse mémoire de l'accu_IP
	  volatile int *ptr_slv_reg = (int *) XPAR_ACCU_IP_0_S00_AXI_BASEADDR; // voir Xparameter
	  // nous avons défini des valeurs pour remplir notre mémoire

//	  int somme = *ptr_slv_reg;
//	  boolean control = *(ptr_slv_reg + 1);
	  *(ptr_slv_reg+1) = 0;

	  srand(3);

	 printf ("Ecriture sur Tab[%d] :");
	 // Ecrire des valeurs aléatoire dans le tableau

	  	 for (int i = 2; i<10; i++)
	  {
	    // Récriture dans le registre ptr_slv_reg[i]
//		  *(ptr_slv_reg+i) = 1;
	  	int val	= (rand()%120);
	    *(ptr_slv_reg+i) = val;
	    printf ("  Tab[%d]  = %d\n", i, val);
	  }


	  // Lecture des valeurs
	  printf ("  Valeur : \r\n");
	 for (int i=2; i<10; i++)
	  {
	    printf (" Lecture   Tab[%d]  = %d \n",i, *(ptr_slv_reg+i));
	    somme = somme +*(ptr_slv_reg+i);
	  }

	// printf (" Lecture somme avant = %d \n", *(ptr_slv_reg+0));
//	 printf (" control lecture = %d \n", *(ptr_slv_reg+1));
	//	xil_printf ("===========\r");

	 printf (" control lecture = %d \n", *(ptr_slv_reg+1));
	 *(ptr_slv_reg+1) = 1;

	 usleep(8000);

	 printf (" control lecture = %d \n", *(ptr_slv_reg+1));
	 printf (" Lecture somme apres calcul = %d \n", *(ptr_slv_reg+0));
	 printf (" control lecture = %d \n", *(ptr_slv_reg+1));

	 printf ("Somme soft = %d \n",somme);
		xil_printf ("===========\r");
	while(1){
;
	}
	cleanup_platform();
	return 0;
}
